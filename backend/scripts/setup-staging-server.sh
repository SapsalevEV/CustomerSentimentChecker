#!/bin/bash

###############################################################################
# –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ STAGING —Å–µ—Ä–≤–µ—Ä–∞ (89.23.99.74)
#
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ê STAGING –°–ï–†–í–ï–†–ï —Å –ø—Ä–∞–≤–∞–º–∏ root –∏–ª–∏ sudo
#
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
# 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker –∏ Docker Compose
# 2. –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è deploy —Å sudo –ø—Ä–∞–≤–∞–º–∏
# 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç SSH –∫–ª—é—á–∏ –¥–ª—è deploy –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# 4. –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
# 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç firewall (UFW)
# 6. –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª –¥–ª—è staging
###############################################################################

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "========================================="
echo "üöÄ STAGING Server Setup Script"
echo "Server: 89.23.99.74"
echo "========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DEPLOY_USER="deploy"
PROJECT_DIR="/home/${DEPLOY_USER}/actionable-sentiment-backend"
STAGING_IP="89.23.99.74"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root –∏–ª–∏ sudo
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}‚ùå This script must be run as root or with sudo${NC}"
   exit 1
fi

echo -e "${YELLOW}üì¶ Step 1: Installing Docker and Docker Compose${NC}"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
apt-get update

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker GPG –∫–ª—é—á–∞
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
docker --version
docker compose version

echo -e "${GREEN}‚úÖ Docker installed successfully${NC}"

echo -e "${YELLOW}üë§ Step 2: Creating deploy user${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è deploy –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if id "$DEPLOY_USER" &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  User $DEPLOY_USER already exists${NC}"
else
    useradd -m -s /bin/bash $DEPLOY_USER
    echo -e "${GREEN}‚úÖ User $DEPLOY_USER created${NC}"
fi

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ deploy –≤ –≥—Ä—É–ø–ø—É docker
usermod -aG docker $DEPLOY_USER

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ deploy –≤ sudoers (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è firewall –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
if ! grep -q "$DEPLOY_USER ALL=(ALL) NOPASSWD: /usr/sbin/ufw" /etc/sudoers.d/$DEPLOY_USER 2>/dev/null; then
    echo "$DEPLOY_USER ALL=(ALL) NOPASSWD: /usr/sbin/ufw, /usr/bin/systemctl" > /etc/sudoers.d/$DEPLOY_USER
    chmod 440 /etc/sudoers.d/$DEPLOY_USER
    echo -e "${GREEN}‚úÖ Sudo privileges configured for $DEPLOY_USER${NC}"
fi

echo -e "${YELLOW}üîë Step 3: Setting up SSH for deploy user${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ .ssh –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p /home/$DEPLOY_USER/.ssh
chmod 700 /home/$DEPLOY_USER/.ssh

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ authorized_keys –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
touch /home/$DEPLOY_USER/.ssh/authorized_keys
chmod 600 /home/$DEPLOY_USER/.ssh/authorized_keys

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
chown -R $DEPLOY_USER:$DEPLOY_USER /home/$DEPLOY_USER/.ssh

echo -e "${GREEN}‚úÖ SSH directory created${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANT: Add your GitHub Actions public SSH key to:${NC}"
echo -e "${YELLOW}   /home/$DEPLOY_USER/.ssh/authorized_keys${NC}"
echo ""
echo -e "Generate SSH key pair on your local machine:"
echo -e "  ${YELLOW}ssh-keygen -t ed25519 -C \"github-actions-staging\" -f ~/.ssh/github_staging${NC}"
echo -e "Then add PUBLIC key to authorized_keys:"
echo -e "  ${YELLOW}cat ~/.ssh/github_staging.pub | ssh root@$STAGING_IP 'cat >> /home/$DEPLOY_USER/.ssh/authorized_keys'${NC}"
echo -e "And add PRIVATE key to GitHub Secrets as ${YELLOW}STAGING_SSH_KEY${NC}"
echo ""

echo -e "${YELLOW}üìÅ Step 4: Creating project directories${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
mkdir -p $PROJECT_DIR/{database,logs}
chown -R $DEPLOY_USER:$DEPLOY_USER $PROJECT_DIR

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–≤–∞–∂–Ω–æ –¥–ª—è SQLite WAL mode)
chmod 777 $PROJECT_DIR/database
chmod 755 $PROJECT_DIR/logs

echo -e "${GREEN}‚úÖ Project directories created at $PROJECT_DIR${NC}"

echo -e "${YELLOW}üìù Step 5: Creating .env file for STAGING${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
cat > $PROJECT_DIR/.env << 'EOF'
DATABASE_URL=sqlite+aiosqlite:///./database/bank_reviews.db
ENVIRONMENT=staging
LOG_LEVEL=DEBUG
CORS_ORIGINS=["http://89.23.99.74:3000","http://localhost:3000"]
EOF

chown $DEPLOY_USER:$DEPLOY_USER $PROJECT_DIR/.env
chmod 600 $PROJECT_DIR/.env

echo -e "${GREEN}‚úÖ .env file created${NC}"

echo -e "${YELLOW}üî• Step 6: Configuring firewall (UFW)${NC}"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UFW –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v ufw &> /dev/null; then
    apt-get install -y ufw
fi

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UFW
ufw --force enable
ufw default deny incoming
ufw default allow outgoing

# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ SSH (–≤–∞–∂–Ω–æ!)
ufw allow 22/tcp

# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ufw allow 8000/tcp

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ—Ä—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
ufw allow 3000/tcp

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
ufw reload

echo -e "${GREEN}‚úÖ Firewall configured${NC}"
echo ""
ufw status

echo -e "${YELLOW}üê≥ Step 7: Testing Docker for deploy user${NC}"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ docker –æ—Ç –∏–º–µ–Ω–∏ deploy
sudo -u $DEPLOY_USER docker ps || echo -e "${YELLOW}‚ö†Ô∏è  Deploy user needs to re-login for docker group to take effect${NC}"

echo ""
echo "========================================="
echo -e "${GREEN}‚úÖ STAGING Server Setup Complete!${NC}"
echo "========================================="
echo ""
echo "üìã Next steps:"
echo ""
echo "1. Setup SSH keys for GitHub Actions:"
echo "   - Generate: ssh-keygen -t ed25519 -C 'github-actions-staging' -f ~/.ssh/github_staging"
echo "   - Add public key to: /home/$DEPLOY_USER/.ssh/authorized_keys"
echo "   - Add private key to GitHub Secret: STAGING_SSH_KEY"
echo ""
echo "2. Add GitHub Secrets to your repository:"
echo "   STAGING_HOST = $STAGING_IP"
echo "   STAGING_USER = $DEPLOY_USER"
echo "   STAGING_SSH_KEY = (private key content)"
echo "   STAGING_PATH = $PROJECT_DIR"
echo ""
echo "3. Copy database file (if needed):"
echo "   scp database/bank_reviews.db $DEPLOY_USER@$STAGING_IP:$PROJECT_DIR/database/"
echo ""
echo "4. Login to GitHub Container Registry as deploy user:"
echo "   su - $DEPLOY_USER"
echo "   echo YOUR_GITHUB_TOKEN | docker login ghcr.io -u YOUR_GITHUB_USERNAME --password-stdin"
echo ""
echo "5. Test SSH connection from your machine:"
echo "   ssh -i ~/.ssh/github_staging $DEPLOY_USER@$STAGING_IP"
echo ""
echo "üöÄ Ready for CI/CD deployment!"
echo "========================================="
