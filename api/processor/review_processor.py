from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, Union, List, Any

from processor.json_formatter import JsonFormatter
from ya_cloud_llm.ycloud_llm import SyncYCloudLLM
import logging

logger = logging.getLogger(__name__)


class YaReviewProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex Foundation Models.
    """
    def __init__(self, folder_id: str, api_key: str, model_name: str = "yandexgpt-lite"):
        self.model = SyncYCloudLLM(folder_id=folder_id, api_key=api_key, model_name=model_name)
        self.formatter = JsonFormatter()

    def process_item(self, user_prompt: str, system_prompt: str, item_id: int) -> Dict[int, str]:
        '''
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        –ù–∞ –≤—Ö–æ–¥–µ - –æ—Ç–∑—ã–≤ –∏ id, –Ω–∞ –≤—ã—Ö–æ–¥–µ - —Å–ª–æ–≤–∞—Ä—å {id : –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏}.
        '''

        answer = self.model.process_item(user_prompt, system_prompt)
        return {item_id: answer}

    def process_batch_threads(
            self,
            system_prompt: str,
            user_prompts: str,
            max_workers: int = 2
    ) -> Dict:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é –ø–æ—Ç–æ–∫–æ–≤.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏. –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä–µ–π –∑–∞–¥–∞–µ—Ç—Å—è –≤ api_formatter
        """
        results = []
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É. –ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É {id : –æ—Ç–∑—ã–≤}
        logger.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        user_prompts_formatted = self.formatter.format_input(user_prompts)
        logger.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        if "errors" in user_prompts_formatted.keys():
            return self.formatter.format_output(user_prompts_formatted)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –ø–æ—Ç–æ–∫–∞—Ö
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏: submit(–º–µ—Ç–æ–¥, user_prompt, system_prompt, item_id)
            future_to_id = {}

            for item_id, text in user_prompts_formatted.items():
                logger.debug(f"üßµ –ì–æ—Ç–æ–≤–∏–º –∑–∞–¥–∞—á—É: item_id={item_id}, —Ç–∏–ø={type(item_id)}, —Ç–µ–∫—Å—Ç='{text[:50]}...'")
                future = executor.submit(self.process_item, text, system_prompt, item_id)
                future_to_id[future] = item_id

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            for future in as_completed(future_to_id):
                try:
                    result = future.result()
                    results.append(result)
                except Exception as e:
                    item_id = future_to_id[future]
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ item_id={item_id}: {e}")
                    results.append({
                        item_id : []
                    })
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        logger.debug('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
        return self.formatter.format_output(results)







